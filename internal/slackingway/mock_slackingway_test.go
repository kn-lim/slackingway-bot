// Code generated by MockGen. DO NOT EDIT.
// Source: slackingway.go
//
// Generated by this command:
//
//	mockgen -source=slackingway.go -destination=mock_slackingway_test.go -package=slackingway_test
//

// Package slackingway_test is a generated GoMock package.
package slackingway_test

import (
	http "net/http"
	reflect "reflect"

	slack "github.com/slack-go/slack"
	gomock "go.uber.org/mock/gomock"
)

// MockSlackAPIClient is a mock of SlackAPIClient interface.
type MockSlackAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockSlackAPIClientMockRecorder
	isgomock struct{}
}

// MockSlackAPIClientMockRecorder is the mock recorder for MockSlackAPIClient.
type MockSlackAPIClientMockRecorder struct {
	mock *MockSlackAPIClient
}

// NewMockSlackAPIClient creates a new mock instance.
func NewMockSlackAPIClient(ctrl *gomock.Controller) *MockSlackAPIClient {
	mock := &MockSlackAPIClient{ctrl: ctrl}
	mock.recorder = &MockSlackAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackAPIClient) EXPECT() *MockSlackAPIClientMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockSlackAPIClient) GetUserInfo(userID string) (*slack.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", userID)
	ret0, _ := ret[0].(*slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockSlackAPIClientMockRecorder) GetUserInfo(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockSlackAPIClient)(nil).GetUserInfo), userID)
}

// OpenView mocks base method.
func (m *MockSlackAPIClient) OpenView(triggerID string, view slack.ModalViewRequest) (*slack.ViewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenView", triggerID, view)
	ret0, _ := ret[0].(*slack.ViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenView indicates an expected call of OpenView.
func (mr *MockSlackAPIClientMockRecorder) OpenView(triggerID, view any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenView", reflect.TypeOf((*MockSlackAPIClient)(nil).OpenView), triggerID, view)
}

// PostMessage mocks base method.
func (m *MockSlackAPIClient) PostMessage(channelID string, options ...slack.MsgOption) (string, string, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostMessage", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockSlackAPIClientMockRecorder) PostMessage(channelID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockSlackAPIClient)(nil).PostMessage), varargs...)
}

// PublishView mocks base method.
func (m *MockSlackAPIClient) PublishView(userID string, view slack.HomeTabViewRequest, hash string) (*slack.ViewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishView", userID, view, hash)
	ret0, _ := ret[0].(*slack.ViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishView indicates an expected call of PublishView.
func (mr *MockSlackAPIClientMockRecorder) PublishView(userID, view, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishView", reflect.TypeOf((*MockSlackAPIClient)(nil).PublishView), userID, view, hash)
}

// UpdateView mocks base method.
func (m *MockSlackAPIClient) UpdateView(view slack.ModalViewRequest, externalID, hash, viewID string) (*slack.ViewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateView", view, externalID, hash, viewID)
	ret0, _ := ret[0].(*slack.ViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateView indicates an expected call of UpdateView.
func (mr *MockSlackAPIClientMockRecorder) UpdateView(view, externalID, hash, viewID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateView", reflect.TypeOf((*MockSlackAPIClient)(nil).UpdateView), view, externalID, hash, viewID)
}

// MockSlackingway is a mock of Slackingway interface.
type MockSlackingway struct {
	ctrl     *gomock.Controller
	recorder *MockSlackingwayMockRecorder
	isgomock struct{}
}

// MockSlackingwayMockRecorder is the mock recorder for MockSlackingway.
type MockSlackingwayMockRecorder struct {
	mock *MockSlackingway
}

// NewMockSlackingway creates a new mock instance.
func NewMockSlackingway(ctrl *gomock.Controller) *MockSlackingway {
	mock := &MockSlackingway{ctrl: ctrl}
	mock.recorder = &MockSlackingwayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackingway) EXPECT() *MockSlackingwayMockRecorder {
	return m.recorder
}

// NewResponse mocks base method.
func (m *MockSlackingway) NewResponse(message slack.Msg) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewResponse", message)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewResponse indicates an expected call of NewResponse.
func (mr *MockSlackingwayMockRecorder) NewResponse(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewResponse", reflect.TypeOf((*MockSlackingway)(nil).NewResponse), message)
}

// SendBlockMessage mocks base method.
func (m *MockSlackingway) SendBlockMessage(blocks []slack.Block, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBlockMessage", blocks, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendBlockMessage indicates an expected call of SendBlockMessage.
func (mr *MockSlackingwayMockRecorder) SendBlockMessage(blocks, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBlockMessage", reflect.TypeOf((*MockSlackingway)(nil).SendBlockMessage), blocks, channelID)
}

// SendResponse mocks base method.
func (m *MockSlackingway) SendResponse(request *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResponse", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResponse indicates an expected call of SendResponse.
func (mr *MockSlackingwayMockRecorder) SendResponse(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResponse", reflect.TypeOf((*MockSlackingway)(nil).SendResponse), request)
}

// SendTextMessage mocks base method.
func (m *MockSlackingway) SendTextMessage(message, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTextMessage", message, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTextMessage indicates an expected call of SendTextMessage.
func (mr *MockSlackingwayMockRecorder) SendTextMessage(message, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTextMessage", reflect.TypeOf((*MockSlackingway)(nil).SendTextMessage), message, channelID)
}

// WriteToHistory mocks base method.
func (m *MockSlackingway) WriteToHistory(channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToHistory", channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteToHistory indicates an expected call of WriteToHistory.
func (mr *MockSlackingwayMockRecorder) WriteToHistory(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToHistory", reflect.TypeOf((*MockSlackingway)(nil).WriteToHistory), channelID)
}
