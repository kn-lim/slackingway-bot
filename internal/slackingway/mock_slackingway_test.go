// Code generated by MockGen. DO NOT EDIT.
// Source: slackingway.go
//
// Generated by this command:
//
//	mockgen -source=slackingway.go -destination=mock_slackingway_test.go -package=slackingway_test
//

// Package slackingway_test is a generated GoMock package.
package slackingway_test

import (
	http "net/http"
	reflect "reflect"

	slack "github.com/slack-go/slack"
	gomock "go.uber.org/mock/gomock"
)

// MockSlackingway is a mock of Slackingway interface.
type MockSlackingway struct {
	ctrl     *gomock.Controller
	recorder *MockSlackingwayMockRecorder
}

// MockSlackingwayMockRecorder is the mock recorder for MockSlackingway.
type MockSlackingwayMockRecorder struct {
	mock *MockSlackingway
}

// NewMockSlackingway creates a new mock instance.
func NewMockSlackingway(ctrl *gomock.Controller) *MockSlackingway {
	mock := &MockSlackingway{ctrl: ctrl}
	mock.recorder = &MockSlackingwayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackingway) EXPECT() *MockSlackingwayMockRecorder {
	return m.recorder
}

// NewResponse mocks base method.
func (m *MockSlackingway) NewResponse(message slack.Msg) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewResponse", message)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewResponse indicates an expected call of NewResponse.
func (mr *MockSlackingwayMockRecorder) NewResponse(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewResponse", reflect.TypeOf((*MockSlackingway)(nil).NewResponse), message)
}

// SendResponse mocks base method.
func (m *MockSlackingway) SendResponse(request *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResponse", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResponse indicates an expected call of SendResponse.
func (mr *MockSlackingwayMockRecorder) SendResponse(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResponse", reflect.TypeOf((*MockSlackingway)(nil).SendResponse), request)
}
